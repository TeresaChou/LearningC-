# formatted output

當我們要把資料印到螢幕上的時候，一點點的排版可以讓整個畫面的可讀性提高許多。當然我們可以使用tab或空格，但C++有提供更多的基本排版工具。
今天要介紹兩個好用的library: <cstdio>和<iomanip>。cstdio(或stdio.h)是以前C語言留下來的寫法(就是在C++發明前就有的寫法)，這種寫法雖然比較舊，
但是格式清楚，到現在還被很多人使用。而iomanip則是用來調整cout，以物件導向的方式來操控輸出(就是把要輸出的格式都一個一個丟給cout)。

C語言的方式是這樣：

#include <cstdio>
printf("%[flag][width][.precision][type]", identifier);

flag: 表示特殊設定，例如：0(用0取代空格)，+(加正負號)，-(改成靠左對齊)。
width: 寬度，預設是靠右對齊，不足的用空格補齊，超過的就超過。
precision: 小數點後的精度到幾位，前面要加小數點。
type:
      d     整數
      f     浮點數
      c     字元
      s     字串
      e     科學記號
      o     整數(八進位)
      x     整數(十六進位)

C++的方式是把不同的flag餵給cout。

      setw()         寬度
      setprecision() 精度(包括小數點前和後)
      setfill()      補齊寬度用字元(預設是空格)
      left/right     靠左/靠右
      scietific      科學記號
      oct            八進位
      hex            十六進位

# different data type

不同的資料型別對電腦來說最大的差別，其實就是變數的記憶體大小。例如說，當我們宣告一個char的時候，電腦便會分一個byte，
也就是8個bits的記憶體給這個變數。8個bits總共可以記0~255，電腦在使用這個變數的時候便會用char的編碼方式去讀寫它。我們可以做這樣的實驗：

   char a = 'a';
   cout << (int)a;

你可以發現a這個字元在電腦中其實是記成97(當然是用二進位的方式紀錄的)，只是在char的編碼方式中97就代表a。同樣的float, bool和不同的型別都有自己的大小和編碼方式，
像bool就是一個byte，int就是8個bytes。我們可以用sizeof()這個operator去檢查一個變數佔了多大的記憶體。

由於每個變數的記憶體有限，如果我們紀錄的值超過記憶體的範圍，就會造成溢位，這時候變數中所紀錄的值可能就跟我們想的不會一樣。
例如說，int這個變數最大可以記到2147483647，如果我們這樣做：

  int x = 2200000000;
  cout << x;

結果會跑出一個負的數，可見這個值已經超過可紀錄的範圍了。對於小數也有類似的問題，由於記憶體的空間有限，當小數精度不夠的時候，
電腦只會紀錄一個最接近的值（範例請見formatted_output_precision.cpp）。

TODO: month.cpp sizeof.cpp formetted_output_precision.cpp
