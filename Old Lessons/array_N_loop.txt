# 上次課程補充：

還有幾個常用的operator：

   operator    用法     效果相等於

   ++          a++;     a = a+1;
   --          a--;     a = a-1;
   +=          a+=3;    a = a+3;
   
   -=, *=, /=, %= 用法相同

==================================== 正文開始 =================================

# Array  陣列

通常我們處理的資料不會是一個一個，而是一次一大筆，例如：全班50的人的成績。這時候不可能一個一個變數去做宣告，而需要使用陣列來一次宣告一大群的資料。像我們常見的string，就是char的陣列。任何型別的變數都可以用陣列來宣告，方式如下：

   int grade[50];

這樣就一次宣告了50個整數變數，就像是一次跟電腦要一整排長度為50的抽屜。陣列中不同編號的變數要用方括號來存取。如果我們要將10號同學的成績紀錄為100分：

   grade[9] = 100;

要特別注意，陣列中的編號是從0開始的！！在這個陣列中，第一個變數是grade[0]，第二個是grade[1]，第50個是grade[49]。我們也可以在宣告陣列的時候就指定變數的初始值：

   int grade[10] = {0};                // 每個變數的初始值都會是0
   int grade[4] = {60, 70, 80, 90};    // 分別指定不同的值

陣列也可以是多維的。假設我們依照座位把12個同學分成4排，每排3個人，我們可以用一個4*3的二維陣列去紀錄同學們的成績：

   int grade[4][3];

在這個陣列中每個變數的編號分別如下：

   grade[0][0]    grade[0][1]    grade[0][2]
   grade[1][0]    grade[1][1]    grade[1][2]
   grade[2][0]    grade[2][1]    grade[2][2]
   grade[3][0]    grade[3][1]    grade[3][2]


# Loop 迴圈

迴圈是用來幫我們執行不斷重複的事情，C++的迴圈有while loop和for loop。

while loop又分成while loop和do while loop，結構分別是：

   while(條件符合) {
      做這件事;
   }

   do {
      做這件事;
   } while(條件符合);

假設我現在已經吃了一碗飯，但是我要吃五碗飯才會飽，這樣就可以寫成：

   cout << "我吃了一碗飯" << endl;
   int rice = 1;

   while(rice < 5) {
      cout << "再吃一碗飯" << endl;
      rice++;
   }

如此就會印出4次"再吃一碗飯"。同樣的事情也可以用do while來做到：

   cout << "我吃了一碗飯" << endl;
   int rice = 1;

   do {
      cout << "再吃一碗飯" << endl;
      rice++:
   } while(rice < 5);
   
這兩種迴圈唯一的差別是，do while會先執行一次再判斷，while則是在第一次執行前就會進行判斷。

   cout << "我吃了五碗飯" << endl;
   int rice = 5;

   while(rice < 5) {
      cout << "再吃一碗飯" << endl;
      rice++;
   }


   cout << "我吃了五碗飯" << endl;
   int rice = 5;

   do {
      cout << "再吃一碗飯" << endl;
      rice++:
   } while(rice < 5);

像上面的這個例子，第一個迴圈不會執行，第二個迴圈則會印出一次"再吃一碗飯"。

for迴圈則是用一個變數來控制迴圈的次數，它的形式和示範如下(用一開始的例子)：

   for(宣告控制變數; 條件; 每次跑完迴圈要做的調整) {
      要做的事;
   }

   cout << "我吃了一碗飯" << endl;
   for(int i=0; i<4; i++)
      cout << "再吃一碗飯" << endl;
   }
   
這樣就會印出四次。for迴圈很好用的地方是他自帶一個控制變數，而這個變數可以被拿來使用。假設我們已經有一個陣列grade[50]，裏面存了全班學生的成績，我們就可以這樣印出所有同學的成績：

   for(int i=0; i<50; i++) {
       cout << i << " 號同學的成績是" << grade[i] << "分" << endl;
   }

但是要記住，兩種迴圈的能力是相同的，能用for loop做到的事，也一定能用while loop做到，反之亦然。要依據不同的需求挑選最適合的迴圈。

另外，C++還有兩個操控迴圈的key word: break & continue。break的意思是無條件結束迴圈，continue的意思則是無條件的直接進入迴圈的下一輪。假設我要在存在name[100]的一堆名字中尋找一個人：

int number = 0;
for(int i=0; i<50; i++) {
   if(name[i] == "Jonathan") {
      number = i+1;
      break;
   }
}
if(number > 0) cout << "Jonathan is at number " << number << endl;
else  cout << "Jonathan is not in the group" << endl;

TODO: loop1.cpp loop2.cpp wheat.cpp

story behind wheat.cpp:

   從前有個富有但不懂得照顧百姓的國王。有一年國內遇到了旱災，許多百姓沒有食物吃，吝嗇的國王卻不願意拿出國庫中的糧食來救濟百姓。
   宮廷中的一位數學家想了一個辦法要就百姓於水火之中。他送給國王一副西洋棋。國王沒有看過西洋棋，非常的喜歡這個禮物。他問數學家想要什麼樣的酬賞，數學家說，希望國王在西洋棋的第一個棋格上放上一粒麥子，第二個棋格放前一格的兩倍，也就是兩粒，第3個放四粒，以此類推，直到放滿64格棋格，作為給他的禮物。
   國王聽了覺得很容易，立刻叫侍衛去國庫取麥子。沒想到不久候侍衛就回來報告說，即使傾盡國庫中所有的麥子，都沒有辦法把棋盤裝滿。國王聽了目瞪口呆，但也無計可施，只好讓數學家把所有的麥子都拿去發送給百姓了。
